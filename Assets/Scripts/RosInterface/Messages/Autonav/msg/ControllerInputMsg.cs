//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Autonav
{
    [Serializable]
    public class ControllerInputMsg : Message
    {
        public const string k_RosMessageName = "autonav_msgs/ControllerInput";
        public override string RosMessageName => k_RosMessageName;

        public double btn_north;
        public double btn_east;
        public double btn_south;
        public double btn_west;
        public double btn_start;
        public double btn_select;
        public double btn_mode;
        public double btn_tr;
        public double btn_tl;
        public double key_record;
        public double abs_hat0x;
        public double abs_hat0y;
        public double abs_x;
        public double abs_y;
        public double abs_z;
        public double abs_rz;
        public double abs_gas;
        public double abs_brake;
        public double wildcard;

        public ControllerInputMsg()
        {
            this.btn_north = 0.0;
            this.btn_east = 0.0;
            this.btn_south = 0.0;
            this.btn_west = 0.0;
            this.btn_start = 0.0;
            this.btn_select = 0.0;
            this.btn_mode = 0.0;
            this.btn_tr = 0.0;
            this.btn_tl = 0.0;
            this.key_record = 0.0;
            this.abs_hat0x = 0.0;
            this.abs_hat0y = 0.0;
            this.abs_x = 0.0;
            this.abs_y = 0.0;
            this.abs_z = 0.0;
            this.abs_rz = 0.0;
            this.abs_gas = 0.0;
            this.abs_brake = 0.0;
            this.wildcard = 0.0;
        }

        public ControllerInputMsg(double btn_north, double btn_east, double btn_south, double btn_west, double btn_start, double btn_select, double btn_mode, double btn_tr, double btn_tl, double key_record, double abs_hat0x, double abs_hat0y, double abs_x, double abs_y, double abs_z, double abs_rz, double abs_gas, double abs_brake, double wildcard)
        {
            this.btn_north = btn_north;
            this.btn_east = btn_east;
            this.btn_south = btn_south;
            this.btn_west = btn_west;
            this.btn_start = btn_start;
            this.btn_select = btn_select;
            this.btn_mode = btn_mode;
            this.btn_tr = btn_tr;
            this.btn_tl = btn_tl;
            this.key_record = key_record;
            this.abs_hat0x = abs_hat0x;
            this.abs_hat0y = abs_hat0y;
            this.abs_x = abs_x;
            this.abs_y = abs_y;
            this.abs_z = abs_z;
            this.abs_rz = abs_rz;
            this.abs_gas = abs_gas;
            this.abs_brake = abs_brake;
            this.wildcard = wildcard;
        }

        public static ControllerInputMsg Deserialize(MessageDeserializer deserializer) => new ControllerInputMsg(deserializer);

        private ControllerInputMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.btn_north);
            deserializer.Read(out this.btn_east);
            deserializer.Read(out this.btn_south);
            deserializer.Read(out this.btn_west);
            deserializer.Read(out this.btn_start);
            deserializer.Read(out this.btn_select);
            deserializer.Read(out this.btn_mode);
            deserializer.Read(out this.btn_tr);
            deserializer.Read(out this.btn_tl);
            deserializer.Read(out this.key_record);
            deserializer.Read(out this.abs_hat0x);
            deserializer.Read(out this.abs_hat0y);
            deserializer.Read(out this.abs_x);
            deserializer.Read(out this.abs_y);
            deserializer.Read(out this.abs_z);
            deserializer.Read(out this.abs_rz);
            deserializer.Read(out this.abs_gas);
            deserializer.Read(out this.abs_brake);
            deserializer.Read(out this.wildcard);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.btn_north);
            serializer.Write(this.btn_east);
            serializer.Write(this.btn_south);
            serializer.Write(this.btn_west);
            serializer.Write(this.btn_start);
            serializer.Write(this.btn_select);
            serializer.Write(this.btn_mode);
            serializer.Write(this.btn_tr);
            serializer.Write(this.btn_tl);
            serializer.Write(this.key_record);
            serializer.Write(this.abs_hat0x);
            serializer.Write(this.abs_hat0y);
            serializer.Write(this.abs_x);
            serializer.Write(this.abs_y);
            serializer.Write(this.abs_z);
            serializer.Write(this.abs_rz);
            serializer.Write(this.abs_gas);
            serializer.Write(this.abs_brake);
            serializer.Write(this.wildcard);
        }

        public override string ToString()
        {
            return "ControllerInputMsg: " +
            "\nbtn_north: " + btn_north.ToString() +
            "\nbtn_east: " + btn_east.ToString() +
            "\nbtn_south: " + btn_south.ToString() +
            "\nbtn_west: " + btn_west.ToString() +
            "\nbtn_start: " + btn_start.ToString() +
            "\nbtn_select: " + btn_select.ToString() +
            "\nbtn_mode: " + btn_mode.ToString() +
            "\nbtn_tr: " + btn_tr.ToString() +
            "\nbtn_tl: " + btn_tl.ToString() +
            "\nkey_record: " + key_record.ToString() +
            "\nabs_hat0x: " + abs_hat0x.ToString() +
            "\nabs_hat0y: " + abs_hat0y.ToString() +
            "\nabs_x: " + abs_x.ToString() +
            "\nabs_y: " + abs_y.ToString() +
            "\nabs_z: " + abs_z.ToString() +
            "\nabs_rz: " + abs_rz.ToString() +
            "\nabs_gas: " + abs_gas.ToString() +
            "\nabs_brake: " + abs_brake.ToString() +
            "\nwildcard: " + wildcard.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
